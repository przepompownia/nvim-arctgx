# vim setl sw=4 ts=4 sts=4 et
snippet vdx
    var_dump(xdebug_get_function_stack());
snippet <?
    <?php

    ${0:${VISUAL}}
snippet dst "declare(strict_types=1)"
    declare(strict_types=${1:1});
snippet wh "while (condition) { ... }"
    while (${1:/* condition */}) {
        ${0:${VISUAL}}
    }
snippet do "do { ... } while (condition)"
    do {
        ${0:${VISUAL}}
    } while (${1});
snippet if "if (condition) { ... }"
    if (${1}) {
        ${0:${VISUAL}}
    }
snippet ifn "if (!condition) { ... }"
    if (!${1}) {
        ${0:${VISUAL}}
    }
snippet switch "switch($var) { case 'xyz': ... default: .... }"
    switch ($${1:variable}) {
        case '${2:value}':
            ${3}
            break;
        ${0}
        default:
            ${4}
            break;
    }
snippet case "case 'value': ... break"
    case '${1:value}':
        ${0:${VISUAL}}
        break;
snippet for "for ($i = 0; $i < $count; $i++) { ... }"
    for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
        ${0:${VISUAL}}
    }
snippet foreach "foreach ($var as $value) { .. }"
    foreach ($${1:variable} as $${2:value}) {
        ${0:${VISUAL}}
    }
snippet foreachk "foreach ($var as $key => $value) { .. }"
    foreach ($${1:variable} as $${2:key} => $${3:value}) {
        ${0:${VISUAL}}
    }
snippet try "try { ... } catch (Exception $e) { ... }"
    try {
        ${0:${VISUAL}}
    } catch (${1:Exception} \$${2:error}) {
    }
snippet vd
    var_dump(${0});
snippet var "var_export($var)"
    var_export(${1}, true);
snippet th "throw new Exception()"
    throw new ${1:Exception}(${2});
snippet con "__construct()"
        public function __construct(
            ${1}
        ) {
        } 
snippet pug "Public getter"
        public function $1(): ${2}
        {
            return \$this->${1:name};
        }
snippet pub "Public function"
        public function ${1:name}(${2}): ${3:void}
        {${VISUAL}
        }
snippet pro "Protected function"
        protected function ${1:name}(${2}): ${3:void}
        {
            ${VISUAL}${5:;}
        }
snippet pri "Private function"
        private function ${1:name}(${2}): ${3:void}
        {
            ${VISUAL}${5:;}
        }
snippet pubs "Public static function"
        public static function ${1:name}(${2}): ${3:void}
        {
            ${VISUAL}${5:;}
        }
snippet pros "Protected static function"
        protected static function ${1:name}(${2}): ${3:void}
        {
            ${VISUAL}${5:;}
        }
snippet pris "Private static function"
        private static function ${1:name}(${2}): ${3:void}
        {
            ${VISUAL}${5:;}
        }
snippet prv "private variable"
        private ${1:string} $${2:name}; 
snippet prc "promoted private property"
        private ${1:string} $${2:name}, 
snippet xd "xdebug_break"
        xdebug_break()
snippet dv "@var"
        /** @var ${1:type} \$${2:name} */
snippet dr "@var"
        /** @return ${1:type} */
snippet ycc "Yii controller PHP8 constructor"
        public function __construct(
            string \$id,
            Module \$module,
            private ${1:} \$${2:name},
            array \$config = [],
        ) {
            parent::__construct(\$id, \$module, \$config);
        }
snippet ycbef "Yii controller before action"
		public function beforeAction(\$action)
		{
			${1}

			return parent::beforeAction(\$action);
		}
snippet yca "Yii web action"
    public function action${1:Index}(${2:string} \$${3:slug}): Response
    {
    }
snippet ycbeh "Yii controller behaviors method"
    public function behaviors(): array
    {
        return [
            'verbs' => [
                'class' => VerbFilter::class,
                'actions' => [
                    '${1:action-name}' => ['${2:GET}'],
                ],
            ],
        ];
    }
